"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'junegunn/vim-easy-align'
Plug 'tpope/vim-fugitive'
Plug 'preservim/nerdtree'
Plug 'preservim/nerdcommenter'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'iamcco/markdown-preview.nvim', {'do': 'cd app & yarn install'}
Plug 'schickling/vim-bufonly'
Plug 'ntpeters/vim-better-whitespace'
Plug 'roman/golden-ratio'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'itchyny/lightline.vim'
Plug 'taohexxx/lightline-buffer'
Plug 'NLKNguyen/papercolor-theme'
Plug 'ryanoasis/vim-devicons'

call plug#end()

" coc.nvim specific
let g:coc_global_extensions = [
  \'coc-go',
  \'coc-json',
  \'coc-tsserver',
  \'coc-html',
  \'coc-css',
  \'coc-yaml',
  \'coc-python',
  \'coc-lists',
  \'coc-lines',
  \'coc-tag',
  \'coc-sql',
  \'coc-highlight',
  \'coc-syntax',
  \'coc-docker',
  \'coc-sh',
  \'coc-word',
  \'coc-git',
  \'coc-prettier',
  \'coc-pairs',
  \'coc-actions',
  \'coc-snippets'
\]

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Basic configuration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:python_host_prog = "~/.pyenv/shims/python"
" There is some issue with Node and why here is full path
" https://github.com/neoclide/coc.nvim/issues/856
" let g:coc_node_path = '/home/glacierr/.nodenv/shims/node'

let mapleader = ","

set number
set nobackup
set nowritebackup
set noswapfile
set laststatus=2 " Always display the status line
set showtabline=2
set autoindent
set smartindent
set expandtab

" Give more space for displaying messages.
set cmdheight=2

set wildignore=*.o,*~,*.pyc
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*.DS_Store*
set wildignore+=*/__pycache__/*,*/.mypy_cache/*

" set statusline=-        " hide file name in statusline
set fillchars=stl:-     " fill active window's statusline with -
set fillchars+=stlnc:-  " also fill inactive windows
set fillchars+=vert:\|  " add a bar for vertical splits

set ffs=unix,dos,mac

set timeoutlen=300
set ttimeoutlen=150

set shiftwidth=2
set softtabstop=2

set backspace=indent,eol,start
set termguicolors
if has("macunix")
  set clipboard=unnamed
else
  set clipboard=unnamedplus
endif

set background=light
colorscheme PaperColor

set incsearch
set ignorecase
set smartcase
set lazyredraw
set textwidth=99
set colorcolumn=99
set encoding=utf8

set novisualbell
set noerrorbells

" Specify the behavior when switching between buffers
set switchbuf=useopen,usetab,vsplit

" Set x lines to the cursor - when moving vertically using j/k
set so=10
set wildmenu
if !&scrolloff
  set scrolloff=3
endif
if !&sidescrolloff
  set sidescrolloff=5
endif

" if hidden is not set, TextEdit might fail.
set hidden
" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Advance configs
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Enable better whitespace plugin
let g:better_whitespace_enabled = 1
let g:strip_whitespace_on_save = 1
" Don't ask for confirmation
let g:strip_whitespace_confirm = 0
" Strip white lines at end of file
let g:strip_whitelines_at_eof = 1

let NERDTreeHighlightCursorline=0
let NERDTreeIgnore = [
    \'\.undodir$','\.pyc$', '__pycache__$',
    \'\.git$', '\.pytest_cache$', '\.idea$', 'build$',
    \'dist$', '\.egg-info$', '\.vscode$', '\.mypy_cache$',
    \'.DS_Store$'
    \]
let NERDTreeChDirMode=2
let NERDTreeShowHidden=1
let NERDTreeDirArrows=1
let NERDTreeMinimalUI=1
let NERDTreeMouseMode=2
let NERDTreeShowBookmarks=1
let NERDTreeAutoDeleteBuffer = 1
let g:NERDSpaceDelims = 1
let g:NERDTreeAutoDeleteBuffer = 1
let g:NERDDefaultAlign = 'left'

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Keep all folds open when a file is opened
augroup OpenAllFoldsOnFileOpen
    autocmd!
    autocmd BufRead * normal zR
augroup END

let g:lightline = {
    \ 'tabline': {
    \   'left': [
    \     [ 'bufferbefore', 'buffercurrent', 'bufferafter' ],
    \   ],
    \   'right': [['close']],
    \ },
    \ 'active': {
    \   'left': [
    \     [ 'mode', 'paste', 'cocstatus', 'currentfunction', 'readonly', 'filename', 'modified' ],
    \   ],
    \   'right':[
    \     [ 'blame', 'filetype', 'fileencoding', 'lineinfo', 'percent' ],
    \   ],
    \ },
    \ 'component_expand': {
    \   'buffercurrent': 'lightline#buffer#buffercurrent',
    \   'bufferbefore': 'lightline#buffer#bufferbefore',
    \   'bufferafter': 'lightline#buffer#bufferafter',
    \ },
    \ 'component_type': {
    \   'buffercurrent': 'tabsel',
    \   'bufferbefore': 'raw',
    \   'bufferafter': 'raw',
    \ },
    \ 'component_function': {
    \   'bufferinfo': 'lightline#buffer#bufferinfo',
    \   'blame': 'LightlineGitBlame',
    \   'cocstatus': 'coc#status',
    \   'currentfunction': 'CocCurrentFunction'
    \ },
    \ 'colorscheme': 'PaperColor',
    \ 'component': {
    \   'readonly': '%{&readonly?"r!":""}',
    \ },
    \ 'separator': { 'left': '', 'right': '' },
    \ 'subseparator': { 'left': '', 'right': '' }
    \ }

augroup langs
  autocmd!
  autocmd BufNewFile,BufRead Dockerfile* set syntax=dockerfile
  autocmd FileType python setlocal tabstop=4 softtabstop=4 shiftwidth=4 textwidth=100 fileformat=unix cinwords=if,elif,else,for,while,try,except,finally,def,class,with
  autocmd FileType go setlocal tabstop=8 softtabstop=8 shiftwidth=8 textwidth=100 fileformat=unix cinwords=if,else,switch,select,case,for,type,import,const,func
augroup end

" grep word under cursor
command! -nargs=+ -complete=custom,s:GrepArgs Rg exe 'CocList grep '.<q-args>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Maps
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
imap kj <Esc>

inoremap <Up> <Nop>
inoremap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>

" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nmap <silent> ]e <Plug>(coc-diagnostic-next)
nmap <silent> [e <Plug>(coc-diagnostic-prev)

" Remap keys for git commands
nmap <silent> ]c <Plug>(coc-git-nextchunk)
nmap <silent> [c <Plug>(coc-git-prevchunk)
nmap <silent> <Leader>hp <Plug>(coc-git-chunkinfo)
nmap <silent> <Leader>hr :<C-u>CocCommand git.chunkUndo<CR>
nmap <silent> <Leader>gb :Gblame<CR>
nmap <silent> <Leader>hb <Plug>(coc-git-commit)

nmap <F2> <Plug>(coc-rename)

nmap <Leader><C-s> <Plug>MarkdownPreview
nmap <Leader><C-p> <Plug>MarkdownPreviewStop

vmap <Leader>f  <Plug>(coc-format-selected)
nmap <Leader>f  <Plug>(coc-format-selected)

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>CheckBackSpace() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>ShowDocumentation()<CR>

" Multiple cursor
nmap <expr> <silent> <Leader>d <SID>SelectCurrentWord()

" Visual mode pressing * or # searches for the current selection
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>

" NerdTree
nnoremap <Leader>nn :NERDTreeToggle<CR>
nnoremap <Leader>nf :NERDTreeFind<CR>

" Yank file path with line number
nnoremap <Leader>yl :let @+=expand("%") . ':' . line(".")<CR>

" n always search forward and N backward
nnoremap <expr> n  'Nn'[v:searchforward]
nnoremap <expr> N  'nN'[v:searchforward]

" Close all the buffers except the current buffer.
map <Leader>bo :BufOnly<CR>
" Close the current buffer
map <silent> <Leader>bd :bd<CR>
" Close all the buffers
map <Leader>ba :bufdo bd<CR>
map <Leader>. :bnext<CR>
map <Leader>m :bprevious<CR>

" EasyAlign
" selection -> ga=
" vipga=
" gaip=
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

map <silent> <space>q :qa!<CR>

" Mappings using CoCList:
nnoremap <silent> <space><space> :CocList grep<cr>
nnoremap <silent> <space>o :CocList outline<cr>
nnoremap <silent> <space>; :CocList buffers<cr>
nnoremap <silent> <space>, :CocList files<cr>
nnoremap <silent> <space>l :CocList symbols<cr>
nnoremap <silent> <space>e :CocList diagnostics<cr>
nnoremap <silent> <space>g :CocList gstatus<cr>

" Keymapping for grep word under cursor with interactive mode
nnoremap <silent> <Leader>cf :exe 'CocList -I --input='.expand('<cword>').' grep'<cr>

" Remap for do codeAction of selected region
nmap <silent> <Leader>a :<C-u>set operatorfunc=<SID>cocActionsOpenFromSelected<CR>g@
xmap <silent> <Leader>a :<C-u>execute 'CocCommand actions.open ' . visualmode()<CR>

" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! s:cocActionsOpenFromSelected(type) abort
  execute 'CocCommand actions.open ' . a:type
endfunction

function! s:CheckBackSpace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

function! s:SelectCurrentWord()
  if !get(g:, 'coc_cursors_activated', 0)
    return "\<Plug>(coc-cursors-word)"
  endif
  return "*\<Plug>(coc-cursors-word):nohlsearch\<CR>"
endfunc

function! s:ShowDocumentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

function! s:GrepArgs(...)
  let list = ['-S', '-smartcase', '-i', '-ignorecase', '-w', '-word',
        \ '-e', '-regex', '-u', '-skip-vcs-ignores', '-t', '-extension']
  return join(list, "\n")
endfunction

function! CocCurrentFunction()
    return get(b:, 'coc_current_function', '')
endfunction

function! LightlineGitBlame() abort
  let blame = get(b:, 'coc_git_blame', '')
  " return blame
  return winwidth(0) > 120 ? blame : ''
endfunction

function! VisualSelection(direction, extra_filter) range
  let l:saved_reg = @"
  execute "normal! vgvy"

  let l:pattern = escape(@", "\\/.*'$^~[]")
  let l:pattern = substitute(l:pattern, "\n$", "", "")

  if a:direction == 'gv'
    call CmdLine("Rg '" . l:pattern . "' " )
  elseif a:direction == 'replace'
    call CmdLine("%s" . '/'. l:pattern . '/')
  endif

  let @/ = l:pattern
  let @" = l:saved_reg
endfunction
