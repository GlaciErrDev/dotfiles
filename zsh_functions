#################
# ZSH functions #
#################

# Make a local virtualenv
function local-venv() {
        if [ $# -eq 0 ]; then
            pyenv virtualenv "${PWD##*/}";
        else
            pyenv virtualenv $1 "${PWD##*/}";
        fi
        pyenv local "${PWD##*/}";
        pyenv pyright;
        pip install flake8 mypy pylint neovim pyright black ipython;
}

# Initialize go mod for current directory
function init-gomod() {
        go mod init glacierrdev/"${PWD##*/}";
}

# Get the current name of virtualenv
function virtualenv_info() {
        [ $VIRTUAL_ENV ] && echo '('`basename $VIRTUAL_ENV`')'
}

# Neovim switcher
function nvs() {
  items=("default")
  config=$(printf "%s\n" "${items[@]}" | fzf --prompt=" Neovim Config  " --height=25% --layout=reverse --border --exit-0)
  if [[ -z $config ]]; then
    echo "Nothing selected"
    return 0
  elif [[ $config == "default" ]]; then
    config=""
  fi
  NVIM_APPNAME=$config nvim $@
}

# Select TMUX session or create new one
function tmx() {
    session_id=""
    list_sessions=$(tmux list-sessions)
    if [ $? -eq 0 ]; then
        num_sessions=$(echo ${list_sessions} | wc -l | awk '{print $1}')
        if [ ${num_sessions} -eq 1 ]; then
            session_id=$(echo ${list_sessions} | awk '{print $1}' | sed 's|:||')
            tmux a
        else
            session=$(echo ${list_sessions} | fzf \
                --prompt="Active TMUX Session:" \
                --height=25% \
                --layout=reverse \
                --border)
            session_id=$(echo ${session} | awk '{print $1}' | sed 's|:||')
            tmux a -t ${session_id}
        fi
    else
        tmux
    fi
}

function gd() {
  preview="git diff $@ --color=always -- {-1} | delta"
  git diff $@ --name-only | fzf \
    --preview $preview \
    --preview-window=up,75% \
    --bind Ctrl-p:preview-half-page-up,Ctrl-n:preview-half-page-down
}

# Flutter watch for hot reload application
function flutter-watch(){
  tmux send-keys "flutter run $1 $2 $3 $4 --pid-file=/tmp/tf1.pid" Enter \;\
  split-window -v \;\
  send-keys 'nodemon -e dart -x "cat /tmp/tf1.pid | xargs kill -s USR1"' Enter \;\
  resize-pane -y 5 -t 1 \;\
  select-pane -t 0 \;
}

# Shell wrapper that provides the ability to change the current working directory when exiting Yazi
function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}
